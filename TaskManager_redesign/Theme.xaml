<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:e="http://schemas.microsoft.com/xaml/behaviors"
                    xmlns:local="clr-namespace:TaskManager_redesign"
                    xmlns:converters="clr-namespace:TaskManager_redesign.Converters">
    <converters:BoolToVisibilityConverter x:Key="BoolToVisibilityConverter"/>
    <converters:StatusToIcoConverter x:Key="statusToIco"/>
    <SolidColorBrush x:Key="MainBackground" Color="#FFF6F6F6"/>
    <SolidColorBrush x:Key="MainUserControl" Color="White"/>
    <SolidColorBrush x:Key="MainUserControl.Border" Color="#FFF1F1F1"/>
    <SolidColorBrush x:Key="MainUserControlForeground" Color="Black"/>
    <SolidColorBrush x:Key="MainUserControl.MouseOver" Color="Gainsboro"/>
    <SolidColorBrush x:Key="MainUserControl.Pressed" Color="#FF646464"/>
    <SolidColorBrush x:Key="MainUserControl.SubControl" Color="#FFF3F3F3"/>
    <SolidColorBrush x:Key="MainUserControl.SubControl.MouseOver" Color="#D3D1D1"/>
    <SolidColorBrush x:Key="MainUserControl.SubControl.Pressed" Color="#FFC5C5C5"/>
    
    <Style TargetType="TextBlock" x:Key="h1">
        <Setter Property="FontFamily" Value="Styrene A LC"/>
        <Setter Property="FontSize" Value="36px"/>
        <Setter Property="FontWeight" Value="Medium"/>
    </Style>

    <Style TargetType="TextBlock" x:Key="Canvas-Title-h2">
        <Setter Property="FontFamily" Value="Styrene A LC"/>
        <Setter Property="FontSize" Value="24px"/>
        <Setter Property="FontWeight" Value="Regular"/>
        <Setter Property="Foreground" Value="{DynamicResource MainBackground}"/>
    </Style>

    <Style TargetType="TextBlock" x:Key="h3">
        <Setter Property="FontFamily" Value="Styrene A LC"/>
        <Setter Property="FontSize" Value="14px"/>
        <Setter Property="FontWeight" Value="Regular"/>
        <Setter Property="Foreground" Value="{DynamicResource MainUserControlForeground}"/>
        <Setter Property="LineHeight" Value="14.4px"/>
    </Style>

    <Style TargetType="TextBlock" x:Key="regular-text">
        <Setter Property="FontFamily" Value="Styrene A LC"/>
        <Setter Property="FontSize" Value="12px"/>
        <Setter Property="FontWeight" Value="Light"/>
        <Setter Property="Foreground" Value="{DynamicResource MainUserControlForeground}"/>
        <Setter Property="LineHeight" Value="14.4px"/>
    </Style>

    <Style TargetType="TextBox" x:Key="regular-textBox">
        <Setter Property="FontFamily" Value="Styrene A LC"/>
        <Setter Property="FontSize" Value="12px"/>
        <Setter Property="FontWeight" Value="Light"/>
        <Setter Property="Foreground" Value="{DynamicResource MainUserControlForeground}"/>
    </Style>

    <Style TargetType="Button" x:Key="MenuButton">
        <Setter Property="Background" Value="{DynamicResource MainUserControl}"/>
        <Setter Property="Height" Value="36.45"/>
        <Setter Property="FontFamily" Value="Styrene A LC"/>
        <Setter Property="FontWeight" Value="Regular"/>
        <Setter Property="FontSize" Value="14px"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Border Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}">
                        <ContentPresenter HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Background" Value="{DynamicResource MainUserControl.MouseOver}"/>
            </Trigger>
            <Trigger Property="IsPressed" Value="True">
                <Setter Property="Background" Value="{DynamicResource MainUserControl.Pressed}"/>
            </Trigger>
        </Style.Triggers>
    </Style>

    <Style TargetType="Button" x:Key="AddEmployeeButton">
        <Setter Property="Background" Value="{DynamicResource MainUserControl}"/>
        <Setter Property="FontFamily" Value="Styrene A LC"/>
        <Setter Property="FontWeight" Value="Light"/>
        <Setter Property="FontSize" Value="12px"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Border Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}">
                        <ContentPresenter HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Background" Value="{DynamicResource MainUserControl.MouseOver}"/>
            </Trigger>
            <Trigger Property="IsPressed" Value="True">
                <Setter Property="Background" Value="{DynamicResource MainUserControl.Pressed}"/>
            </Trigger>
        </Style.Triggers>
    </Style>

    <Style TargetType="Button" x:Key="SubMenuButton">
        <Setter Property="Background" Value="{DynamicResource MainUserControl.SubControl}"/>
        <Setter Property="BorderBrush" Value="{x:Null}"/>
        <Setter Property="BorderThickness" Value="0"/>
        <Setter Property="Height" Value="36.45"/>
        <Setter Property="FontFamily" Value="Styrene A LC"/>
        <Setter Property="FontWeight" Value="Regular"/>
        <Setter Property="FontSize" Value="14px"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Border Background="{TemplateBinding Background}" BorderBrush="{x:Null}" BorderThickness="0">
                        <ContentPresenter HorizontalAlignment="Center" VerticalAlignment="Center"/>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Background" Value="{DynamicResource MainUserControl.SubControl.MouseOver}"/>
            </Trigger>
            <Trigger Property="IsPressed" Value="True">
                <Setter Property="Background" Value="{DynamicResource MainUserControl.SubControl.Pressed}"/>
            </Trigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="TreeViewItemFocusVisual">
        <Setter Property="Control.Template">
            <Setter.Value>
                <ControlTemplate>
                    <Rectangle/>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="ExpandCollapseToggleStyle" TargetType="{x:Type ToggleButton}">
        <Setter Property="Focusable" Value="False"/>
        <Setter Property="Width" Value="16"/>
        <Setter Property="Height" Value="16"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ToggleButton}">
                    <Border Background="Transparent" Height="15" Padding="0" Width="15">
                        <Image Source="\res\dropdown2.png" Width="15" Height="15" Name="ExpandPath"/>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsChecked" Value="True">
                            <Setter Property="Source" TargetName="ExpandPath" Value="\res\dropdown.png"/>
                        </Trigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsMouseOver" Value="True"/>
                                <Condition Property="IsChecked" Value="True"/>
                            </MultiTrigger.Conditions>
                        </MultiTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    
    <Style x:Key="placeHolder" TargetType="{x:Type TextBox}" BasedOn="{StaticResource {x:Type TextBox}}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type TextBox}">
                    <Grid x:Name="mainGrid" Background="{TemplateBinding Background}">
                        <TextBox Padding="8" Style="{StaticResource regular-textBox}" Text="{Binding Path=Text, RelativeSource={RelativeSource TemplatedParent}, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"
                                x:Name="textSource" Background="Transparent" Panel.ZIndex="2"  BorderBrush="Transparent" BorderThickness="0"
                                Height="{Binding Path=Height, RelativeSource={RelativeSource TemplatedParent}, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"
                                VerticalContentAlignment="{Binding Path=VerticalContentAlignment, RelativeSource={RelativeSource TemplatedParent}, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"
                                VerticalAlignment="{Binding Path=VerticalContentAlignment, RelativeSource={RelativeSource TemplatedParent}, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"
                                 />
                        <TextBox Text="{TemplateBinding Tag}"  Panel.ZIndex="1"
                                x:Name="placeholderSource"
                                VerticalAlignment="{Binding Path=VerticalContentAlignment, RelativeSource={RelativeSource TemplatedParent}, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"
                                VerticalContentAlignment="{Binding Path=VerticalContentAlignment, RelativeSource={RelativeSource TemplatedParent}, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"
                                BorderBrush="Transparent" BorderThickness="0"
                                 Padding="8"
                                 Background="{TemplateBinding Background}"
                                Height="{Binding Path=Height, RelativeSource={RelativeSource TemplatedParent}, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}">
                            <TextBox.Style>
                                <Style TargetType="{x:Type TextBox}">
                                    <Setter Property="Foreground" Value="Transparent"/>
                                    <Style.Triggers >
                                        <DataTrigger Binding="{Binding Path=Text, Source={x:Reference textSource}}" Value="">
                                            <Setter Property="Foreground" Value="Black"/>
                                            <Setter Property="FontFamily" Value="Styrene A LC"/>
                                            <Setter Property="FontSize" Value="12px"/>
                                            <Setter Property="FontWeight" Value="Regular"/>
                                        </DataTrigger>
                                        <DataTrigger Binding="{Binding Path=IsFocused, Source={x:Reference textSource}}" Value="True">
                                            <Setter Property="Foreground" Value="Transparent"/>
                                            <Setter Property="FontFamily" Value="Styrene A LC"/>
                                            <Setter Property="FontSize" Value="12px"/>
                                            <Setter Property="FontWeight" Value="Regular"/>
                                        </DataTrigger>
                                    </Style.Triggers>
                                </Style>
                            </TextBox.Style>
                        </TextBox>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Background" Value="{DynamicResource MainUserControl.MouseOver}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style TargetType="{x:Type TextBox}" x:Key="EditableField">
        <Setter Property="FontFamily" Value="Styrene A LC"/>
        <Setter Property="FontSize" Value="12px"/>
        <Setter Property="FontWeight" Value="Light"/>
        <Setter Property="Foreground" Value="{DynamicResource MainUserControlForeground}"/>
        <Setter Property="BorderBrush" Value="Transparent"/>
        <Setter Property="BorderThickness" Value="0"/>
        <Setter Property="MinHeight" Value="40"/>

        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type TextBoxBase}">
                    <Grid Name="fieldGrid">
                        <Border x:Name="Border"  BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}">
                            <ScrollViewer x:Name="PART_ContentHost" Focusable="False" HorizontalScrollBarVisibility="Hidden" VerticalScrollBarVisibility="Hidden"/>
                        </Border>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsMouseOver" Value="True"/>
                                <Condition Property="IsReadOnly" Value="False"/>
                            </MultiTrigger.Conditions>
                            <MultiTrigger.Setters>
                                <Setter Property="Background" TargetName="fieldGrid" Value="{DynamicResource MainUserControl.MouseOver}"/>    
                            </MultiTrigger.Setters>
                        </MultiTrigger>
                        <Trigger Property="IsFocused" Value="True">
                            <Setter Property="Background" TargetName="fieldGrid" Value="transparent"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style TargetType="{x:Type TextBox}" x:Key="EditableField-h3">
        <Setter Property="FontFamily" Value="Styrene A LC"/>
        <Setter Property="FontSize" Value="14px"/>
        <Setter Property="FontWeight" Value="Regular"/>
        <Setter Property="Foreground" Value="{DynamicResource MainUserControlForeground}"/>
        <Setter Property="BorderBrush" Value="Transparent"/>
        <Setter Property="BorderThickness" Value="0"/>
        <Setter Property="MinHeight" Value="40"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type TextBoxBase}">
                    <Grid Name="fieldGrid">
                        <Border x:Name="Border" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}">
                            <ScrollViewer x:Name="PART_ContentHost" Focusable="False" HorizontalScrollBarVisibility="Hidden" VerticalScrollBarVisibility="Hidden"/>
                        </Border>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsMouseOver" Value="True"/>
                                <Condition Property="IsReadOnly" Value="False"/>
                            </MultiTrigger.Conditions>
                            <MultiTrigger.Setters>
                                <Setter Property="Background" TargetName="fieldGrid" Value="{DynamicResource MainUserControl.MouseOver}"/>
                            </MultiTrigger.Setters>
                        </MultiTrigger>
                        <Trigger Property="IsFocused" Value="True">
                            <Setter Property="Background" TargetName="fieldGrid" Value="transparent"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>


    <Style TargetType="{x:Type ListView}" x:Key="EmployeeList">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="ListView">
                    <Border Name="Border" BorderThickness="1">
                        <ScrollViewer>
                            <ItemsPresenter />
                        </ScrollViewer>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style TargetType="ListViewItem" x:Key="EmployeeListViewItem">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate>
                    <Grid Margin="5 0" Background="{DynamicResource MainUserControl}" MinHeight="30" Name="ItemGrid">
                        <Image Source="{Binding Status, Converter={StaticResource statusToIco}, Mode=OneWay}" HorizontalAlignment="Left" Margin="5" Width="21"/>
                        <TextBlock Text="{Binding Analytic}" Style="{StaticResource regular-text}" VerticalAlignment="Center" Margin="36 0"/>
                        <Button HorizontalAlignment="Right" Margin="10 0" Height="25" Width="25" BorderBrush="{x:Null}" BorderThickness="0" 
                                Background="Transparent" ToolTip="Удалить участника" Visibility="{TemplateBinding Converter={StaticResource BoolToVisibilityConverter}, Property=IsEnabled}">
                            <e:Interaction.Triggers>
                                <e:EventTrigger EventName="Click">
                                    <e:InvokeCommandAction Command="{Binding Source={StaticResource MainViewModel}, Path=DeleteAssignedEmployee}" CommandParameter="{Binding}"/>
                                </e:EventTrigger>
                            </e:Interaction.Triggers>
                            <Image Source="/res/multiply.png"/>
                        </Button>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Background" TargetName="ItemGrid" Value="{DynamicResource MainUserControl.MouseOver}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style TargetType="{x:Type ListView}" x:Key="PlansList">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="ListView">
                    <Border Name="Border" BorderThickness="1">
                        <ScrollViewer>
                                <ItemsPresenter />
                        </ScrollViewer>
                    </Border>
                </ControlTemplate>
                
            </Setter.Value>

        </Setter>
        <Setter Property="ItemContainerStyle" Value="{DynamicResource PlanListViewItem}"/>

    </Style>

    <Style TargetType="ListViewItem" x:Key="PlanListViewItem">
    <Setter Property="Template">
        <Setter.Value>
            <ControlTemplate>
                <Grid Margin="5 0" Background="{DynamicResource MainUserControl}" MinHeight="30" Name="ItemGrid">
                        <StackPanel Orientation="Horizontal" Margin="3 15">
                            <CheckBox IsChecked="{Binding IsDone}" Style="{DynamicResource CheckBoxStyle}" VerticalAlignment="Center" Margin="5 0 15 0" x:Name="DoneCheckBox">
                                <e:Interaction.Triggers>
                                    <e:EventTrigger EventName="Checked">
                                        <e:InvokeCommandAction Command="{Binding Source={StaticResource MainViewModel}, Path=PlanStatusChanged}" CommandParameter="{Binding}"/>
                                    </e:EventTrigger>
                                    <e:EventTrigger EventName="Unchecked">
                                        <e:InvokeCommandAction Command="{Binding Source={StaticResource MainViewModel}, Path=PlanStatusChanged}" CommandParameter="{Binding}"/>
                                    </e:EventTrigger>
                                </e:Interaction.Triggers>
                            </CheckBox>
                            <TextBlock Text="{Binding}" Style="{DynamicResource regular-text}" VerticalAlignment="Top" TextWrapping="WrapWithOverflow" MaxWidth="250"/>
                        </StackPanel>
                    <Button HorizontalAlignment="Right" Margin="10 0" Height="25" Width="25" BorderBrush="{x:Null}" BorderThickness="0" 
                                Background="Transparent" ToolTip="Удалить шаг" >
                        <Image Source="/res/multiply.png"/>
                            <e:Interaction.Triggers>
                                <e:EventTrigger EventName="Click">
                                    <e:InvokeCommandAction Command="{Binding Source={StaticResource MainViewModel}, Path=RemovePlan}" CommandParameter="{Binding}"/>
                                </e:EventTrigger>
                            </e:Interaction.Triggers>
                    </Button>
                </Grid>
                <ControlTemplate.Triggers>
                    <Trigger Property="IsMouseOver" Value="True">
                        <Setter Property="Background" TargetName="ItemGrid" Value="{DynamicResource MainUserControl.MouseOver}"/>
                    </Trigger>
                        <Trigger Property="IsChecked" Value="True" SourceName="DoneCheckBox">
                            <Setter Property="Background" TargetName="ItemGrid" Value="#D5F5E3"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
            </ControlTemplate>
        </Setter.Value>
    </Setter>
    </Style>


    <Style TargetType="CheckBox" x:Key="CheckBoxStyle">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="CheckBox">
                    <BulletDecorator Background="Transparent">
                        <BulletDecorator.Bullet>
                            <Border x:Name="Border" CornerRadius="13" Width="15" Height="15" BorderThickness="1" BorderBrush="Black">
                                <Ellipse x:Name="CheckMark" Width="7" Height="7"
                                         HorizontalAlignment="Center" VerticalAlignment="Center" Fill="black"/>
                            </Border>
                        </BulletDecorator.Bullet>
                        <ContentPresenter RecognizesAccessKey="True"/>
                    </BulletDecorator>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsChecked" Value="false">
                            <Setter TargetName="CheckMark" Property="Fill" Value="Transparent"/>
                        </Trigger>
                        <Trigger Property="IsChecked" Value="True">
                            <Setter TargetName="CheckMark" Property="Fill" Value="black" />
                        </Trigger>
                        <Trigger Property="IsChecked" Value="{x:Null}">
                            <Setter TargetName="CheckMark" Property="Fill" Value="Transparent" />
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="true">
                            <Setter TargetName="Border" Property="Background" Value="darkGray" />
                        </Trigger>
                        <Trigger Property="IsPressed" Value="true">
                            <Setter TargetName="Border" Property="Background" Value="LightGray" />
                            <Setter TargetName="Border" Property="BorderBrush" Value="LightGray" />
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter TargetName="Border" Property="Background" Value="gray" />
                            <Setter TargetName="Border" Property="BorderBrush" Value="gray" />
                            <Setter Property="Foreground" Value="Gray"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
</ResourceDictionary>