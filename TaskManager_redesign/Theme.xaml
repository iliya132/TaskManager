<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:e="http://schemas.microsoft.com/xaml/behaviors"
                    xmlns:local="clr-namespace:TaskManager_redesign"
                    xmlns:converters="clr-namespace:TaskManager_redesign.Converters">
    <converters:BoolToVisibilityConverter x:Key="BoolToVisibilityConverter"/>
    <converters:StatusToIcoConverter x:Key="statusToIco"/>
    <converters:TaskPlanToStringConverter x:Key="TaskPlanToStringConverter"/>
    <SolidColorBrush x:Key="MainBackground" Color="#FFF6F6F6"/>
    <SolidColorBrush x:Key="MainUserControl" Color="White"/>
    <SolidColorBrush x:Key="MainUserControl.Border" Color="#FFF1F1F1"/>
    <SolidColorBrush x:Key="MainUserControlForeground" Color="Black"/>
    <SolidColorBrush x:Key="MainUserControl.MouseOver" Color="Gainsboro"/>
    <SolidColorBrush x:Key="MainUserControl.Pressed" Color="#FF646464"/>
    <SolidColorBrush x:Key="MainUserControl.SubControl" Color="#FFF3F3F3"/>
    <SolidColorBrush x:Key="MainUserControl.SubControl.MouseOver" Color="#D3D1D1"/>
    <SolidColorBrush x:Key="MainUserControl.SubControl.Pressed" Color="#FFC5C5C5"/>
    
    <Style TargetType="TextBlock" x:Key="h1">
        <Setter Property="FontFamily" Value="Styrene A LC"/>
        <Setter Property="FontSize" Value="36px"/>
        <Setter Property="FontWeight" Value="Medium"/>
    </Style>

    <Style TargetType="TextBlock" x:Key="Canvas-Title-h2">
        <Setter Property="FontFamily" Value="Styrene A LC"/>
        <Setter Property="FontSize" Value="24px"/>
        <Setter Property="FontWeight" Value="Regular"/>
        <Setter Property="Foreground" Value="{DynamicResource MainBackground}"/>
    </Style>

    <Style TargetType="TextBlock" x:Key="h3">
        <Setter Property="FontFamily" Value="Styrene A LC"/>
        <Setter Property="FontSize" Value="14px"/>
        <Setter Property="FontWeight" Value="Regular"/>
        <Setter Property="Foreground" Value="{DynamicResource MainUserControlForeground}"/>
        <Setter Property="LineHeight" Value="14.4px"/>
    </Style>

    <Style TargetType="TextBlock" x:Key="regular-text">
        <Setter Property="FontFamily" Value="Styrene A LC"/>
        <Setter Property="FontSize" Value="12px"/>
        <Setter Property="FontWeight" Value="Light"/>
        <Setter Property="Foreground" Value="{DynamicResource MainUserControlForeground}"/>
        <Setter Property="LineHeight" Value="14.4px"/>
    </Style>

    <Style TargetType="TextBox" x:Key="regular-textBox">
        <Setter Property="FontFamily" Value="Styrene A LC"/>
        <Setter Property="FontSize" Value="12px"/>
        <Setter Property="FontWeight" Value="Light"/>
        <Setter Property="Foreground" Value="{DynamicResource MainUserControlForeground}"/>
    </Style>

    <Style TargetType="Button" x:Key="MenuButton">
        <Setter Property="Background" Value="{DynamicResource MainUserControl}"/>
        <Setter Property="Height" Value="36.45"/>
        <Setter Property="FontFamily" Value="Styrene A LC"/>
        <Setter Property="FontWeight" Value="Regular"/>
        <Setter Property="FontSize" Value="14px"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Border Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}">
                        <ContentPresenter HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Background" Value="{DynamicResource MainUserControl.MouseOver}"/>
            </Trigger>
            <Trigger Property="IsPressed" Value="True">
                <Setter Property="Background" Value="{DynamicResource MainUserControl.Pressed}"/>
            </Trigger>
        </Style.Triggers>
    </Style>

    <Style TargetType="Button" x:Key="AddEmployeeButton">
        <Setter Property="Background" Value="{DynamicResource MainUserControl}"/>
        <Setter Property="FontFamily" Value="Styrene A LC"/>
        <Setter Property="FontWeight" Value="Light"/>
        <Setter Property="FontSize" Value="12px"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Border Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}">
                        <ContentPresenter HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Background" Value="{DynamicResource MainUserControl.MouseOver}"/>
            </Trigger>
            <Trigger Property="IsPressed" Value="True">
                <Setter Property="Background" Value="{DynamicResource MainUserControl.Pressed}"/>
            </Trigger>
        </Style.Triggers>
    </Style>

    <Style TargetType="Button" x:Key="SubMenuButton">
        <Setter Property="Background" Value="{DynamicResource MainUserControl.SubControl}"/>
        <Setter Property="BorderBrush" Value="{x:Null}"/>
        <Setter Property="BorderThickness" Value="0"/>
        <Setter Property="Height" Value="36.45"/>
        <Setter Property="FontFamily" Value="Styrene A LC"/>
        <Setter Property="FontWeight" Value="Regular"/>
        <Setter Property="FontSize" Value="14px"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Border Background="{TemplateBinding Background}" BorderBrush="{x:Null}" BorderThickness="0">
                        <ContentPresenter HorizontalAlignment="Center" VerticalAlignment="Center"/>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Background" Value="{DynamicResource MainUserControl.SubControl.MouseOver}"/>
            </Trigger>
            <Trigger Property="IsPressed" Value="True">
                <Setter Property="Background" Value="{DynamicResource MainUserControl.SubControl.Pressed}"/>
            </Trigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="TreeViewItemFocusVisual">
        <Setter Property="Control.Template">
            <Setter.Value>
                <ControlTemplate>
                    <Rectangle/>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="ExpandCollapseToggleStyle" TargetType="{x:Type ToggleButton}">
        <Setter Property="Focusable" Value="False"/>
        <Setter Property="Width" Value="16"/>
        <Setter Property="Height" Value="16"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ToggleButton}">
                    <Border Background="Transparent" Height="15" Padding="0" Width="15">
                        <Image Source="\res\dropdown2.png" Width="15" Height="15" Name="ExpandPath"/>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsChecked" Value="True">
                            <Setter Property="Source" TargetName="ExpandPath" Value="\res\dropdown.png"/>
                        </Trigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsMouseOver" Value="True"/>
                                <Condition Property="IsChecked" Value="True"/>
                            </MultiTrigger.Conditions>
                        </MultiTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    
    <Style x:Key="placeHolder" TargetType="{x:Type TextBox}" BasedOn="{StaticResource {x:Type TextBox}}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type TextBox}">
                    <Grid x:Name="mainGrid" Background="{TemplateBinding Background}">
                        <TextBox Padding="8" Style="{StaticResource regular-textBox}" Text="{Binding Path=Text, RelativeSource={RelativeSource TemplatedParent}, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"
                                x:Name="textSource" Background="Transparent" Panel.ZIndex="2"  BorderBrush="Transparent" BorderThickness="0"
                                Height="{Binding Path=Height, RelativeSource={RelativeSource TemplatedParent}, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"
                                VerticalContentAlignment="{Binding Path=VerticalContentAlignment, RelativeSource={RelativeSource TemplatedParent}, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"
                                VerticalAlignment="{Binding Path=VerticalContentAlignment, RelativeSource={RelativeSource TemplatedParent}, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"
                                 TextWrapping="{Binding Path=TextWrapping, RelativeSource={RelativeSource TemplatedParent}, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"
                                 AcceptsReturn="{Binding Path=AcceptsReturn, RelativeSource={RelativeSource TemplatedParent}, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"
                                 />
                        <TextBox Text="{TemplateBinding Tag}"  Panel.ZIndex="1"
                                x:Name="placeholderSource"
                                VerticalAlignment="{Binding Path=VerticalContentAlignment, RelativeSource={RelativeSource TemplatedParent}, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"
                                VerticalContentAlignment="{Binding Path=VerticalContentAlignment, RelativeSource={RelativeSource TemplatedParent}, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"
                                BorderBrush="Transparent" BorderThickness="0"
                                 Padding="8"
                                 Background="{TemplateBinding Background}"
                                Height="{Binding Path=Height, RelativeSource={RelativeSource TemplatedParent}, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}">
                            <TextBox.Style>
                                <Style TargetType="{x:Type TextBox}">
                                    <Setter Property="Foreground" Value="Transparent"/>
                                    <Style.Triggers >
                                        <DataTrigger Binding="{Binding Path=Text, ElementName=textSource}" Value="">
                                            <Setter Property="Foreground" Value="Black"/>
                                            <Setter Property="FontFamily" Value="Styrene A LC"/>
                                            <Setter Property="FontSize" Value="12px"/>
                                            <Setter Property="FontWeight" Value="Regular"/>
                                        </DataTrigger>
                                        <DataTrigger Binding="{Binding Path=IsFocused, ElementName=textSource}" Value="True">
                                            <Setter Property="Foreground" Value="Transparent"/>
                                            <Setter Property="FontFamily" Value="Styrene A LC"/>
                                            <Setter Property="FontSize" Value="12px"/>
                                            <Setter Property="FontWeight" Value="Regular"/>
                                        </DataTrigger>
                                    </Style.Triggers>
                                </Style>
                            </TextBox.Style>
                        </TextBox>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Background" Value="{DynamicResource MainUserControl.MouseOver}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style TargetType="{x:Type TextBox}" x:Key="EditablePlanField">
        <Setter Property="FontFamily" Value="Styrene A LC"/>
        <Setter Property="FontSize" Value="12px"/>
        <Setter Property="FontWeight" Value="Light"/>
        <Setter Property="Foreground" Value="{DynamicResource MainUserControlForeground}"/>
        <Setter Property="BorderBrush" Value="Transparent"/>
        <Setter Property="BorderThickness" Value="0"/>
        <Setter Property="MinHeight" Value="40"/>
        <Setter Property="Text" Value="{Binding Mode=TwoWay, Path=Description}"/>
        
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type TextBoxBase}">
                    <Grid Name="fieldGrid">
                        <Border x:Name="Border"  BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}">
                            <ScrollViewer x:Name="PART_ContentHost" Focusable="False" HorizontalScrollBarVisibility="Hidden" VerticalScrollBarVisibility="Hidden"/>
                        </Border>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsMouseOver" Value="True"/>
                                <Condition Property="IsReadOnly" Value="False"/>
                            </MultiTrigger.Conditions>
                            <MultiTrigger.Setters>
                                <Setter Property="Background" TargetName="fieldGrid" Value="{DynamicResource MainUserControl.MouseOver}"/>
                            </MultiTrigger.Setters>
                        </MultiTrigger>
                        <Trigger Property="IsFocused" Value="True">
                            <Setter Property="Background" TargetName="fieldGrid" Value="transparent"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="IsFocused" Value="False">
                <Setter Property="Text" Value="{Binding Mode=OneWay, Path=DescriptionWithDueDate}"/>
            </Trigger>
        </Style.Triggers>
    </Style>

    <Style TargetType="{x:Type TextBox}" x:Key="EditableField">
        <Setter Property="FontFamily" Value="Styrene A LC"/>
        <Setter Property="FontSize" Value="12px"/>
        <Setter Property="FontWeight" Value="Light"/>
        <Setter Property="Foreground" Value="{DynamicResource MainUserControlForeground}"/>
        <Setter Property="BorderBrush" Value="Transparent"/>
        <Setter Property="BorderThickness" Value="0"/>
        <Setter Property="MinHeight" Value="40"/>

        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type TextBoxBase}">
                    <Grid Name="fieldGrid">
                        <Border x:Name="Border"  BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}">
                            <ScrollViewer x:Name="PART_ContentHost" Focusable="False" HorizontalScrollBarVisibility="Hidden" VerticalScrollBarVisibility="Hidden"/>
                        </Border>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsMouseOver" Value="True"/>
                                <Condition Property="IsReadOnly" Value="False"/>
                            </MultiTrigger.Conditions>
                            <MultiTrigger.Setters>
                                <Setter Property="Background" TargetName="fieldGrid" Value="{DynamicResource MainUserControl.MouseOver}"/>    
                            </MultiTrigger.Setters>
                        </MultiTrigger>
                        <Trigger Property="IsFocused" Value="True">
                            <Setter Property="Background" TargetName="fieldGrid" Value="transparent"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style TargetType="{x:Type TextBox}" x:Key="EditableField-h3">
        <Setter Property="FontFamily" Value="Styrene A LC"/>
        <Setter Property="FontSize" Value="14px"/>
        <Setter Property="FontWeight" Value="Regular"/>
        <Setter Property="Foreground" Value="{DynamicResource MainUserControlForeground}"/>
        <Setter Property="BorderBrush" Value="Transparent"/>
        <Setter Property="BorderThickness" Value="0"/>
        <Setter Property="MinHeight" Value="40"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type TextBoxBase}">
                    <Grid Name="fieldGrid">
                        <Border x:Name="Border" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}">
                            <ScrollViewer x:Name="PART_ContentHost" Focusable="False" HorizontalScrollBarVisibility="Hidden" VerticalScrollBarVisibility="Hidden"/>
                        </Border>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsMouseOver" Value="True"/>
                                <Condition Property="IsReadOnly" Value="False"/>
                            </MultiTrigger.Conditions>
                            <MultiTrigger.Setters>
                                <Setter Property="Background" TargetName="fieldGrid" Value="{DynamicResource MainUserControl.MouseOver}"/>
                            </MultiTrigger.Setters>
                        </MultiTrigger>
                        <Trigger Property="IsFocused" Value="True">
                            <Setter Property="Background" TargetName="fieldGrid" Value="transparent"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>


    <Style TargetType="{x:Type ListView}" x:Key="EmployeeList">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="ListView">
                    <Border Name="Border" BorderThickness="1">
                        <ScrollViewer>
                            <ItemsPresenter />
                        </ScrollViewer>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style TargetType="ListViewItem" x:Key="EmployeeListViewItem">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate>
                    <Grid Margin="5 0" Background="{DynamicResource MainUserControl}" MinHeight="30" Name="ItemGrid">
                        <Image Source="{Binding Status, Converter={StaticResource statusToIco}, Mode=OneWay}" HorizontalAlignment="Left" Margin="5" Width="21"/>
                        <TextBlock Text="{Binding Analytic}" Style="{StaticResource regular-text}" VerticalAlignment="Center" Margin="36 0"/>
                        <Button HorizontalAlignment="Right" Margin="10 0" Height="25" Width="25" BorderBrush="{x:Null}" BorderThickness="0" 
                                Background="Transparent" ToolTip="Удалить участника" Visibility="{TemplateBinding Converter={StaticResource BoolToVisibilityConverter}, Property=IsEnabled}">
                            <e:Interaction.Triggers>
                                <e:EventTrigger EventName="Click">
                                    <e:InvokeCommandAction Command="{Binding Source={StaticResource MainViewModel}, Path=DeleteAssignedEmployee}" CommandParameter="{Binding}"/>
                                </e:EventTrigger>
                            </e:Interaction.Triggers>
                            <Image Source="/res/multiply.png"/>
                        </Button>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Background" TargetName="ItemGrid" Value="{DynamicResource MainUserControl.MouseOver}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style TargetType="{x:Type ListView}" x:Key="PlansList">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="ListView">
                    <Border Name="Border" BorderThickness="1">
                        <ScrollViewer>
                                <ItemsPresenter />
                        </ScrollViewer>
                    </Border>
                </ControlTemplate>
                
            </Setter.Value>

        </Setter>
        <Setter Property="ItemContainerStyle" Value="{DynamicResource PlanListViewItem}"/>

    </Style>

    <Style TargetType="ListViewItem" x:Key="PlanListViewItem">
    <Setter Property="Template">
        <Setter.Value>
            <ControlTemplate>
                <Grid Margin="5 0" Background="{DynamicResource MainUserControl}" MaxWidth="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=ActualWidth, Mode=OneWay}" MinHeight="30" Name="ItemGrid">
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="50"/>
                            <ColumnDefinition Width="*"/>
                            <ColumnDefinition Width="60"/>
                        </Grid.ColumnDefinitions>
                        <CheckBox IsChecked="{Binding IsDone}" Style="{DynamicResource CheckBoxStyle}" VerticalAlignment="Center" Margin="5 0 15 0" x:Name="DoneCheckBox" Grid.Column="0">
                            <e:Interaction.Triggers>
                                <e:EventTrigger EventName="Checked">
                                    <e:InvokeCommandAction Command="{Binding Source={StaticResource MainViewModel}, Path=PlanStatusChanged}" CommandParameter="{Binding}"/>
                                </e:EventTrigger>
                                <e:EventTrigger EventName="Unchecked">
                                    <e:InvokeCommandAction Command="{Binding Source={StaticResource MainViewModel}, Path=PlanStatusChanged}" CommandParameter="{Binding}"/>
                                </e:EventTrigger>
                            </e:Interaction.Triggers>
                        </CheckBox>
                        <TextBox x:Name="PlanInputBox" Grid.Column="1"  Style="{DynamicResource EditablePlanField}" VerticalAlignment="Center" TextWrapping="Wrap" >
                            <e:Interaction.Triggers>
                                <e:EventTrigger EventName="LostFocus">
                                    <e:InvokeCommandAction Command="{Binding Source={StaticResource MainViewModel}, Path=UpdatePlan}" CommandParameter="{Binding}"/>
                                </e:EventTrigger>
                            </e:Interaction.Triggers>

                        </TextBox>
                        
                        <StackPanel Orientation="Horizontal" HorizontalAlignment="Right" VerticalAlignment="Center"  Grid.Column="2">
                            <DatePicker SelectedDate="{Binding DueDate, Mode=TwoWay}" Style="{DynamicResource DatePickerWithoutTextBoxStyle}">
                                <e:Interaction.Triggers>
                                    <e:EventTrigger EventName="SelectedDateChanged">
                                        <e:InvokeCommandAction Command="{Binding Source={StaticResource MainViewModel}, Path=UpdatePlan}" CommandParameter="{Binding}" />
                                    </e:EventTrigger>
                                </e:Interaction.Triggers>
                            </DatePicker>
                            <Button  Height="25" Width="25" BorderBrush="{x:Null}" BorderThickness="0" 
                                Background="Transparent" ToolTip="Удалить шаг" >
                                <Image Source="/res/multiply.png"/>
                                <e:Interaction.Triggers>
                                    <e:EventTrigger EventName="Click">
                                        <e:InvokeCommandAction Command="{Binding Source={StaticResource MainViewModel}, Path=RemovePlan}" CommandParameter="{Binding}"/>
                                    </e:EventTrigger>
                                </e:Interaction.Triggers>

                            </Button>
                        </StackPanel>
                    
                </Grid>
                <ControlTemplate.Triggers>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsMouseOver" Value="True"/>
                                <Condition Property="IsFocused" Value="False" SourceName="PlanInputBox"/>
                            </MultiTrigger.Conditions>
                            <Setter Property="Background" TargetName="ItemGrid" Value="{DynamicResource MainUserControl.MouseOver}"/>
                        </MultiTrigger>
                        <Trigger Property="IsChecked" Value="True" SourceName="DoneCheckBox">
                            <Setter Property="Background" TargetName="ItemGrid" Value="#D5F5E3"/>
                        </Trigger>
                        

                    </ControlTemplate.Triggers>
                    
                </ControlTemplate>
        </Setter.Value>
    </Setter>
    </Style>


    <Style TargetType="CheckBox" x:Key="CheckBoxStyle">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="CheckBox">
                    <BulletDecorator Background="Transparent">
                        <BulletDecorator.Bullet>
                            <Border x:Name="Border" CornerRadius="13" Width="15" Height="15" BorderThickness="1" BorderBrush="Black">
                                <Ellipse x:Name="CheckMark" Width="7" Height="7"
                                         HorizontalAlignment="Center" VerticalAlignment="Center" Fill="black"/>
                            </Border>
                        </BulletDecorator.Bullet>
                        <ContentPresenter RecognizesAccessKey="True"/>
                    </BulletDecorator>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsChecked" Value="false">
                            <Setter TargetName="CheckMark" Property="Fill" Value="Transparent"/>
                        </Trigger>
                        <Trigger Property="IsChecked" Value="True">
                            <Setter TargetName="CheckMark" Property="Fill" Value="black" />
                        </Trigger>
                        <Trigger Property="IsChecked" Value="{x:Null}">
                            <Setter TargetName="CheckMark" Property="Fill" Value="Transparent" />
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="true">
                            <Setter TargetName="Border" Property="Background" Value="darkGray" />
                        </Trigger>
                        <Trigger Property="IsPressed" Value="true">
                            <Setter TargetName="Border" Property="Background" Value="LightGray" />
                            <Setter TargetName="Border" Property="BorderBrush" Value="LightGray" />
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter TargetName="Border" Property="Background" Value="gray" />
                            <Setter TargetName="Border" Property="BorderBrush" Value="gray" />
                            <Setter Property="Foreground" Value="Gray"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="DatePickerCalendarStyle"
       TargetType="{x:Type Calendar}"
       BasedOn="{StaticResource {x:Type Calendar}}" />

    <!--The template for the button that displays the calendar.-->
    <Style x:Key="DropDownButtonStyle"
       TargetType="Button">
        <Setter Property="Template">
            <Setter.Value>
                    <ControlTemplate TargetType="{x:Type Button}">
                        
                    <Grid>
                        
                        <Grid Background="#11FFFFFF" FlowDirection="LeftToRight" 
                              Name="MainGrid"
                HorizontalAlignment="Center"
                Height="21"
                Margin="0"
                VerticalAlignment="Center"
                Width="21">
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="20*" />
                                <ColumnDefinition Width="20*" />
                                <ColumnDefinition Width="20*" />
                                <ColumnDefinition Width="20*" />
                            </Grid.ColumnDefinitions>
                            <Grid.RowDefinitions>
                                <RowDefinition Height="23*" />
                                <RowDefinition Height="19*" />
                                <RowDefinition Height="19*" />
                                <RowDefinition Height="19*" />
                            </Grid.RowDefinitions>
                            <Border x:Name="Highlight"
                    BorderThickness="1"
                    Grid.ColumnSpan="4"
                    CornerRadius="0,0,1,1"
                    Margin="-1"
                    Opacity="1"
                    Grid.Row="0"
                    Grid.RowSpan="4">
                                <Border.BorderBrush>
                                    <SolidColorBrush Color="Transparent" />
                                </Border.BorderBrush>
                            </Border>
                            <Border x:Name="Background"
                    BorderBrush="#FFFFFFFF"
                    BorderThickness="1"
                    Grid.ColumnSpan="4"
                    CornerRadius=".5"
                    Margin="0,-1,0,0"
                    Opacity="1"
                    Grid.Row="1"
                    Grid.RowSpan="3">
                                <Border.Background>
                                    <SolidColorBrush Color="Transparent" />
                                </Border.Background>
                            </Border>
                            <Border x:Name="BackgroundGradient"
                    BorderBrush="#BF000000"
                    BorderThickness="1"
                    Grid.ColumnSpan="4"
                    CornerRadius=".5"
                    Margin="0,-1,0,0"
                    Opacity="1"
                    Grid.Row="1"
                    Grid.RowSpan="3">
                                <Border.Background>
                                    <LinearGradientBrush EndPoint=".7,1"
                                     StartPoint=".7,0">
                                        <GradientStop Color="#FFFFFFFF"
                                Offset="0" />
                                        <GradientStop Color="#F9FFFFFF"
                                Offset="0.375" />
                                        <GradientStop Color="#E5FFFFFF"
                                Offset="0.625" />
                                        <GradientStop Color="#C6FFFFFF"
                                Offset="1" />
                                    </LinearGradientBrush>
                                </Border.Background>
                            </Border>
                            <Rectangle Grid.ColumnSpan="4"
                       Grid.RowSpan="1"
                       StrokeThickness="1">
                                <Rectangle.Fill>
                                    <SolidColorBrush Color="Transparent"/>
                                </Rectangle.Fill>
                                <Rectangle.Stroke>
                                    <LinearGradientBrush EndPoint="0.48,-1"
                                     StartPoint="0.48,1.25">
                                        <GradientStop Color="#FF494949" />
                                        <GradientStop Color="#FF9F9F9F"
                                Offset="1" />
                                    </LinearGradientBrush>
                                </Rectangle.Stroke>
                            </Rectangle>
                            <Path Fill="#FF2F2F2F"
                  Grid.Row="1"
                  Grid.Column="0"
                  Grid.RowSpan="3"
                  Grid.ColumnSpan="4"
                  HorizontalAlignment="Center"
                  VerticalAlignment="Center"
                  RenderTransformOrigin="0.5,0.5"
                  Margin="4,3,4,3"
                  Stretch="Fill"
                  Data="M11.426758,8.4305077 L11.749023,8.4305077 
                    L11.749023,16.331387 L10.674805,16.331387 
                    L10.674805,10.299648 L9.0742188,11.298672
                    L9.0742188,10.294277 C9.4788408,10.090176 
                    9.9094238,9.8090878 10.365967,9.4510155 
                    C10.82251,9.0929432 11.176106,8.7527733 
                    11.426758,8.4305077 z M14.65086,8.4305077 
                    L18.566387,8.4305077 L18.566387,9.3435936 
                    L15.671368,9.3435936 L15.671368,11.255703 
                    C15.936341,11.058764 16.27293,10.960293 
                    16.681133,10.960293 C17.411602,10.960293 
                    17.969301,11.178717 18.354229,11.615566 
                    C18.739157,12.052416 18.931622,12.673672
                    18.931622,13.479336 C18.931622,15.452317 
                    18.052553,16.438808 16.294415,16.438808
                    C15.560365,16.438808 14.951641,16.234707 
                    14.468243,15.826504 L14.881817,14.929531
                    C15.368796,15.326992 15.837872,15.525723 
                    16.289043,15.525723 C17.298809,15.525723 
                    17.803692,14.895514 17.803692,13.635098 
                    C17.803692,12.460618 17.305971,11.873379 
                    16.310528,11.873379 C15.83071,11.873379 
                    15.399232,12.079271 15.016094,12.491055
                    L14.65086,12.238613 z" />
                            <Ellipse Grid.ColumnSpan="4"
                     Fill="#FFFFFFFF"
                     HorizontalAlignment="Center"
                     Height="3"
                     StrokeThickness="0"
                     VerticalAlignment="Center"
                     Width="3" />
                            <Border x:Name="DisabledVisual"
                    BorderBrush="#B2FFFFFF"
                    BorderThickness="1"
                    Grid.ColumnSpan="4"
                    CornerRadius="0,0,.5,.5"
                    Opacity="0"
                    Grid.Row="0"
                    Grid.RowSpan="4" />
                        </Grid>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True" SourceName="MainGrid">
                            <Setter Property="Background" Value="Gray" TargetName="MainGrid"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style TargetType="{x:Type DatePicker}" x:Key="DatePickerStyle">
        <Setter Property="Foreground" Value="#FF333333" />
        <Setter Property="IsTodayHighlighted" Value="True" />
        <Setter Property="SelectedDateFormat" Value="Short" />
        <Setter Property="Padding" Value="2" />
        <Setter Property="BorderThickness" Value="0" />
        <Setter Property="HorizontalContentAlignment" Value="Stretch" />
        <!--Set CalendarStyle to DatePickerCalendarStyle.-->
        <Setter Property="CalendarStyle" Value="{DynamicResource DatePickerCalendarStyle}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type DatePicker}">
                    <Border BorderThickness="{TemplateBinding BorderThickness}" Padding="{TemplateBinding Padding}">
                        <VisualStateManager.VisualStateGroups>
                            <VisualStateGroup x:Name="CommonStates">
                                <VisualState x:Name="Normal" />
                                <VisualState x:Name="Disabled">
                                    <Storyboard>
                                        <DoubleAnimation Duration="0" To="1" Storyboard.TargetProperty="Opacity" Storyboard.TargetName="PART_DisabledVisual" />
                                    </Storyboard>
                                </VisualState>
                            </VisualStateGroup>
                        </VisualStateManager.VisualStateGroups>
                        <Grid x:Name="PART_Root" Width="Auto" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}">
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="*" />
                                <ColumnDefinition Width="Auto" />
                            </Grid.ColumnDefinitions>
                            <Button x:Name="PART_Button"
                    Grid.Column="0"
                    Foreground="{TemplateBinding Foreground}"
                    Focusable="False"
                    HorizontalAlignment="Right"
                    Margin="3,0,3,0"
                    Grid.Row="0"
                    Style="{StaticResource DropDownButtonStyle}"
                    VerticalAlignment="Center" />
                            <DatePickerTextBox x:Name="PART_TextBox"
                               Grid.Column="1"
                               Style="{StaticResource placeHolder}"
                                               Tag="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=Tag}"
                               Focusable="{TemplateBinding Focusable}"
                               HorizontalContentAlignment="Stretch"
                               Grid.Row="0"
                                               HorizontalAlignment="Stretch"
                               VerticalContentAlignment="Stretch" />
                            <Grid x:Name="PART_DisabledVisual" Grid.ColumnSpan="2"
                  Grid.Column="0"
                  IsHitTestVisible="False"
                  Opacity="0"
                  Grid.Row="0">
                                <Grid.ColumnDefinitions>
                                    <ColumnDefinition Width="*" />
                                    <ColumnDefinition Width="Auto" />
                                </Grid.ColumnDefinitions>
                                <Rectangle Grid.Column="0"
                         Fill="#A5FFFFFF"
                         RadiusY="1"
                         Grid.Row="0"
                         RadiusX="1" />
                                <Rectangle Grid.Column="1"
                         Fill="#A5FFFFFF"
                         Height="18"
                         Margin="3,0,3,0"
                         RadiusY="1"
                         Grid.Row="0"
                         RadiusX="1"
                         Width="19" />
                                <Popup x:Name="PART_Popup"
                     AllowsTransparency="True"
                     Placement="Bottom"
                     PlacementTarget="{Binding ElementName=PART_TextBox}"
                     StaysOpen="False" />
                            </Grid>
                        </Grid>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style TargetType="{x:Type DatePicker}" x:Key="DatePickerWithoutTextBoxStyle">
        <Setter Property="Foreground" Value="#FF333333" />
        <Setter Property="IsTodayHighlighted" Value="True" />
        <Setter Property="SelectedDateFormat" Value="Short" />
        <Setter Property="Padding" Value="2" />
        <Setter Property="BorderThickness" Value="0" />
        <Setter Property="HorizontalContentAlignment" Value="Stretch" />
        <!--Set CalendarStyle to DatePickerCalendarStyle.-->
        <Setter Property="CalendarStyle" Value="{DynamicResource DatePickerCalendarStyle}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type DatePicker}">
                    <Border BorderThickness="{TemplateBinding BorderThickness}" Padding="{TemplateBinding Padding}">
                        <VisualStateManager.VisualStateGroups>
                            <VisualStateGroup x:Name="CommonStates">
                                <VisualState x:Name="Normal" />
                                <VisualState x:Name="Disabled">
                                    <Storyboard>
                                        <DoubleAnimation Duration="0" To="1" Storyboard.TargetProperty="Opacity" Storyboard.TargetName="PART_DisabledVisual" />
                                    </Storyboard>
                                </VisualState>
                            </VisualStateGroup>
                        </VisualStateManager.VisualStateGroups>
                        <Grid x:Name="PART_Root" Width="Auto" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}">
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="*" />
                                <ColumnDefinition Width="Auto" />
                            </Grid.ColumnDefinitions>
                            <Button x:Name="PART_Button"
                    Grid.Column="0"
                    Foreground="{TemplateBinding Foreground}"
                    Focusable="False"
                    HorizontalAlignment="Right"
                    Margin="3,0,3,0"
                    Grid.Row="0"
                    Style="{StaticResource DropDownButtonStyle}"
                    VerticalAlignment="Center" />
                            <DatePickerTextBox x:Name="PART_TextBox"
                               Grid.Column="1"
                               Style="{StaticResource placeHolder}"
                                               Tag="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=Tag}"
                               Focusable="{TemplateBinding Focusable}"
                               HorizontalContentAlignment="Stretch"
                               Grid.Row="0"
                                               Visibility="Collapsed"
                                               HorizontalAlignment="Stretch"
                               VerticalContentAlignment="Stretch" />
                            <Grid x:Name="PART_DisabledVisual" Grid.ColumnSpan="2"
                  Grid.Column="0"
                  IsHitTestVisible="False"
                  Opacity="0"
                  Grid.Row="0">
                                <Grid.ColumnDefinitions>
                                    <ColumnDefinition Width="*" />
                                    <ColumnDefinition Width="Auto" />
                                </Grid.ColumnDefinitions>
                                <Rectangle Grid.Column="0"
                         Fill="#A5FFFFFF"
                         RadiusY="1"
                         Grid.Row="0"
                         RadiusX="1" />
                                <Rectangle Grid.Column="1"
                         Fill="#A5FFFFFF"
                         Height="18"
                         Margin="3,0,3,0"
                         RadiusY="1"
                         Grid.Row="0"
                         RadiusX="1"
                         Width="19" />
                                <Popup x:Name="PART_Popup"
                     AllowsTransparency="True"
                     Placement="Bottom"
                     PlacementTarget="{Binding ElementName=PART_TextBox}"
                     StaysOpen="False" />
                            </Grid>
                        </Grid>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>


    <Color x:Key="WindowColor">#FFE8EDF9</Color>
    <Color x:Key="ContentAreaColorLight">#FFC5CBF9</Color>
    <Color x:Key="ContentAreaColorDark">#FF7381F9</Color>

    <Color x:Key="DisabledControlLightColor">#FFE8EDF9</Color>
    <Color x:Key="DisabledControlDarkColor">#FFC5CBF9</Color>
    <Color x:Key="DisabledForegroundColor">#FF888888</Color>

    <Color x:Key="SelectedBackgroundColor">#FFC5CBF9</Color>
    <Color x:Key="SelectedUnfocusedColor">#FFDDDDDD</Color>

    <Color x:Key="ControlLightColor">White</Color>
    <Color x:Key="ControlMediumColor">#FF7381F9</Color>
    <Color x:Key="ControlDarkColor">#FF211AA9</Color>

    <Color x:Key="ControlMouseOverColor">#FF3843C4</Color>
    <Color x:Key="ControlPressedColor">#FF211AA9</Color>


    <Color x:Key="GlyphColor">#FF444444</Color>
    <Color x:Key="GlyphMouseOver">sc#1, 0.004391443, 0.002428215, 0.242281124</Color>

    <!--Border colors-->
    <Color x:Key="BorderLightColor">#FFCCCCCC</Color>
    <Color x:Key="BorderMediumColor">#FF888888</Color>
    <Color x:Key="BorderDarkColor">#FF444444</Color>

    <Color x:Key="PressedBorderLightColor">#FF888888</Color>
    <Color x:Key="PressedBorderDarkColor">#FF444444</Color>

    <Color x:Key="DisabledBorderLightColor">#FFAAAAAA</Color>
    <Color x:Key="DisabledBorderDarkColor">#FF888888</Color>

    <Color x:Key="DefaultBorderBrushDarkColor">Black</Color>

    <!--Control-specific resources.-->
    <Color x:Key="HeaderTopColor">#FFC5CBF9</Color>
    <Color x:Key="DatagridCurrentCellBorderColor">Black</Color>
    <Color x:Key="SliderTrackDarkColor">#FFC5CBF9</Color>

    <Color x:Key="NavButtonFrameColor">#FF3843C4</Color>

    <LinearGradientBrush x:Key="MenuPopupBrush"
                     EndPoint="0.5,1"
                     StartPoint="0.5,0">
        <GradientStop Color="{DynamicResource ControlLightColor}"
                Offset="0" />
        <GradientStop Color="{DynamicResource ControlMediumColor}"
                Offset="0.5" />
        <GradientStop Color="{DynamicResource ControlLightColor}"
                Offset="1" />
    </LinearGradientBrush>

    <LinearGradientBrush x:Key="ProgressBarIndicatorAnimatedFill"
                     StartPoint="0,0"
                     EndPoint="1,0">
        <LinearGradientBrush.GradientStops>
            <GradientStopCollection>
                <GradientStop Color="#000000FF"
                    Offset="0" />
                <GradientStop Color="#600000FF"
                    Offset="0.4" />
                <GradientStop Color="#600000FF"
                    Offset="0.6" />
                <GradientStop Color="#000000FF"
                    Offset="1" />
            </GradientStopCollection>
        </LinearGradientBrush.GradientStops>
    </LinearGradientBrush>

    <Style x:Key="TasksListFiltered" TargetType="ListView">
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="BorderBrush" Value="Transparent"/>
        <Setter Property="BorderThickness" Value="0"/>
        <Setter Property="ItemContainerStyle" Value="{DynamicResource TasksListItemsFiltered}"/>
    </Style>
    
    <Style x:Key="TasksListItemsFiltered" TargetType="ListViewItem">
        <Setter Property="Background" Value="White"/>
        <Setter Property="BorderBrush" Value="#FFF6F6F6"/>
        <Setter Property="IsSelected" Value="{Binding IsSelected}"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="ListViewItem">
                    <Grid x:Name="ItemGrid" Background="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=Background}">
                        <Border x:Name="ItemBorder" BorderBrush="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=BorderBrush}" 
                                BorderThickness="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=BorderThickness}">
                            <TextBlock Text="{Binding}" Padding="10" Style="{DynamicResource h3}"/>
                        </Border>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Background" TargetName="ItemGrid" Value="{DynamicResource MainUserControl.MouseOver}"/>
                        </Trigger>
                        <Trigger Property="IsSelected" Value="True">
                            <Setter Property="BorderBrush" TargetName="ItemBorder" Value="Red"/>
                            <Setter Property="BorderThickness" TargetName="ItemBorder" Value="1"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
</ResourceDictionary>